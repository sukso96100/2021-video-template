on:
  workflow_dispatch:
name: Live recording split

env:
  BUCKET_IN: fossasia-2022-live-recordings
  BUCKET_OUT: fossasia-2022-sessions

jobs:
  initsrc:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup build matrix
      id: set-matrix
      run: |
        python build_matrix_split.py 
        JSON=$(cat ./matrix.json)
        JSON="${JSON//'%'/%25}"
        JSON="${JSON//$'\n'/%0A}"
        JSON="${JSON//$'\r'/%0D}"
        echo "::set-output name=matrix::${JSON}"
  render:
    needs: initsrc
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.initsrc.outputs.matrix)}}
      fail-fast: false
    steps:
    - uses: actions/checkout@main
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Check if output already exists
      run: |
        FILECHK=$(aws s3api head-object --bucket ${{env.BUCKET_OUT}} --key ${{matrix.output}}; echo $?)
        if [ $FILECHK -eq 0 ]; then
            echo "Output file already exists, Remove existing file first and try again."
            exit 1
        fi
    - name: Install packages
      run: |
        sudo apt update
        sudo apt install -yq ffmpeg melt
    - name: Download video file
      run: |
        aws s3 cp s3://${{env.BUCKET_IN}}/${{ matrix.source }} .
    - name: Split video
      run: |
        ffmpeg -i ${{matrix.source}} -ss ${{ matrix.time_from }} -to ${{ matrix.time_to }} -c copy video_${{matrix.output}}
    - name: Join image and video
      run: |
        melt \
          images/fossasia.jpg in=0 out=100 -mix 30 -mixer luma \
          ${{matrix.title_image}} in=100 out=200 -mix 30 -mixer luma \
          video_${{matrix.output}} in=200 -mix 30 -mixer luma \
          -consumer avformat:out.mp4 
    - name: Upload rendered video file
      run: | 
        aws s3 cp ${{matrix.output}} s3://${{env.BUCKET_OUT}}/
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: ${{matrix.output}}
    #     path: ${{matrix.output}}
